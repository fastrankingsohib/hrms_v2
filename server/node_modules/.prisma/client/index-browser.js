
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.20.0
 * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
 */
Prisma.prismaVersion = {
  client: "5.20.0",
  engine: "06fc58a368dc7be9fbbbe894adf8d445d208c284"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  title: 'title',
  first_name: 'first_name',
  middle_name: 'middle_name',
  last_name: 'last_name',
  gender: 'gender',
  dob: 'dob',
  email: 'email',
  mobile: 'mobile',
  username: 'username',
  password: 'password',
  date_of_joining: 'date_of_joining',
  employee_id: 'employee_id',
  designation: 'designation',
  status: 'status',
  department: 'department',
  user_type: 'user_type',
  role: 'role',
  reporting_to: 'reporting_to',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by'
};

exports.Prisma.ModulesScalarFieldEnum = {
  id: 'id',
  module_name: 'module_name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ModulesTouserScalarFieldEnum = {
  module_id: 'module_id',
  user_id: 'user_id',
  c: 'c',
  d: 'd',
  r: 'r',
  u: 'u'
};

exports.Prisma.Job_postScalarFieldEnum = {
  id: 'id',
  job_title: 'job_title',
  job_type: 'job_type',
  job_desc: 'job_desc',
  experience: 'experience',
  created_at: 'created_at',
  updated_at: 'updated_at',
  genders: 'genders',
  interview_timing: 'interview_timing',
  job_location: 'job_location',
  job_shift: 'job_shift',
  job_timing: 'job_timing',
  max_experience: 'max_experience',
  min_experience: 'min_experience',
  min_offered_salary: 'min_offered_salary',
  number_of_opening: 'number_of_opening',
  required_qualification: 'required_qualification',
  created_by: 'created_by',
  max_offered_salary: 'max_offered_salary',
  job_exp_date: 'job_exp_date',
  job_scheduled_date: 'job_scheduled_date',
  job_status: 'job_status',
  skills: 'skills',
  job_scheduled_time: 'job_scheduled_time',
  job_pdf_file_path: 'job_pdf_file_path'
};

exports.Prisma.Candidate_listScalarFieldEnum = {
  department: 'department',
  created_at: 'created_at',
  updated_at: 'updated_at',
  address_line1: 'address_line1',
  address_line2: 'address_line2',
  alt_contact_number: 'alt_contact_number',
  alt_email_address: 'alt_email_address',
  candidate_id: 'candidate_id',
  city: 'city',
  communication_skills: 'communication_skills',
  contact_number: 'contact_number',
  country: 'country',
  date_of_birth: 'date_of_birth',
  email_address: 'email_address',
  first_name: 'first_name',
  hobbies: 'hobbies',
  interests: 'interests',
  job_title: 'job_title',
  last_name: 'last_name',
  middle_name: 'middle_name',
  other1: 'other1',
  other2: 'other2',
  other3: 'other3',
  pin_code: 'pin_code',
  recruiter_comments: 'recruiter_comments',
  skills: 'skills',
  state: 'state',
  status: 'status',
  title: 'title',
  work_experience: 'work_experience',
  created_by: 'created_by',
  current_status: 'current_status',
  candidate_image: 'candidate_image',
  candidate_resume: 'candidate_resume',
  candidate_aadhar: 'candidate_aadhar',
  candidate_highest_qualification: 'candidate_highest_qualification',
  candidate_pan: 'candidate_pan',
  work_tenure: 'work_tenure'
};

exports.Prisma.Work_experienceScalarFieldEnum = {
  exp_id: 'exp_id',
  candidate_id: 'candidate_id',
  organisation_name: 'organisation_name',
  total_tenure: 'total_tenure',
  last_designation: 'last_designation',
  last_drawn_salary: 'last_drawn_salary',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.QualificationsScalarFieldEnum = {
  qualifications_id: 'qualifications_id',
  candidate_id: 'candidate_id',
  course: 'course',
  college_university: 'college_university',
  year_of_passing: 'year_of_passing',
  percentage_cgpa: 'percentage_cgpa',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Candidate_applied_jobsScalarFieldEnum = {
  id: 'id',
  candidate_id: 'candidate_id',
  job_id: 'job_id',
  job_status: 'job_status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Interview_detailsScalarFieldEnum = {
  id: 'id',
  candidate_id: 'candidate_id',
  interview_date: 'interview_date',
  interview_time: 'interview_time',
  attempted: 'attempted',
  interviewer: 'interviewer',
  interview_round: 'interview_round',
  remarks: 'remarks',
  created_at: 'created_at',
  updated_at: 'updated_at',
  job_id: 'job_id',
  created_by: 'created_by'
};

exports.Prisma.CommentsScalarFieldEnum = {
  comment_id: 'comment_id',
  created_by: 'created_by',
  comment: 'comment',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  candidate_id: 'candidate_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  user: 'user',
  modules: 'modules',
  modulesTouser: 'modulesTouser',
  job_post: 'job_post',
  candidate_list: 'candidate_list',
  work_experience: 'work_experience',
  qualifications: 'qualifications',
  candidate_applied_jobs: 'candidate_applied_jobs',
  interview_details: 'interview_details',
  comments: 'comments'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
