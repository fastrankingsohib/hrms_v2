generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              Int             @id @default(autoincrement())
  title           String?         @db.VarChar(255)
  first_name      String?         @db.VarChar(50)
  middle_name     String?         @db.VarChar(50)
  last_name       String?         @db.VarChar(50)
  gender          String?         @db.VarChar(20)
  dob             String?         @db.VarChar(50)
  email           String?         @unique @db.VarChar(255)
  mobile          String?         @unique @db.VarChar(20)
  username        String?         @unique @db.VarChar(100)
  password        String?
  date_of_joining String?         @db.VarChar(100)
  employee_id     String?         @db.VarChar(100)
  designation     String?         @db.VarChar(100)
  status          String?         @db.VarChar(100)
  department      String?         @db.VarChar(100)
  user_type       String?         @db.VarChar(100)
  role            String?         @db.VarChar(100)
  reporting_to    String?         @db.VarChar(100)
  created_at      DateTime?       @default(now())
  updated_at      DateTime?       @updatedAt
  created_by      String?         @db.VarChar(50)
  modulesTouser   modulesTouser[]
}

model modules {
  id            Int             @id @default(autoincrement())
  module_name   String          @db.VarChar(255)
  created_at    DateTime?       @default(now())
  updated_at    DateTime?       @updatedAt
  modulesTouser modulesTouser[]
}

model modulesTouser {
  module_id Int
  user_id   Int
  c         Boolean @default(false)
  d         Boolean @default(false)
  r         Boolean @default(false)
  u         Boolean @default(false)
  modules   modules @relation(fields: [module_id], references: [id], onDelete: Cascade)
  user      user    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, module_id])
  @@index([module_id])
  @@map("_modulesTouser")
}

model job_post {
  id                     Int       @id @default(autoincrement())
  job_title              String?   @db.VarChar(255)
  job_type               String?   @db.VarChar(100)
  job_location           String?
  number_of_opening      String?   @db.VarChar(255)
  interview_timing       String?   @db.VarChar(255)
  job_timing             String?   @db.VarChar(255)
  required_qualification String?   @db.VarChar(255)
  skills                 String?   @db.VarChar(255)
  min_offered_salary     String?   @db.VarChar(255)
  max_offered_salary     String?   @db.VarChar(255)
  job_shift              String?   @db.VarChar(255)
  genders                String?   @db.VarChar(255)
  job_desc               String?
  experience             String?   @db.VarChar(50)
  min_experience         String?   @db.VarChar(255)
  max_experience         String?   @db.VarChar(255)
  created_at             DateTime? @default(now())
  updated_at             DateTime? @updatedAt
  created_by             String?   @db.VarChar(100)
  job_status             String?   @db.VarChar(100)
  job_exp_date           String?   @db.VarChar(100)
  job_scheduled_date     String?   @db.VarChar(100)

  candidate_applied_jobs candidate_applied_jobs[]
}

model candidate_list {
  department           String?           @db.VarChar(50)
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  address_line1        String?           @db.VarChar(255)
  address_line2        String?           @db.VarChar(255)
  alt_contact_number   String?           @db.VarChar(20)
  alt_email_address    String?           @db.VarChar(100)
  candidate_id         Int               @id @default(autoincrement())
  city                 String?           @db.VarChar(100)
  communication_skills String?           @db.VarChar(255)
  contact_number       String            @unique @db.VarChar(20)
  country              String?           @db.VarChar(100)
  date_of_birth        String?           @db.VarChar(50)
  email_address        String?           @unique @db.VarChar(100)
  first_name           String?           @db.VarChar(50)
  hobbies              String?           @db.VarChar(255)
  interests            String?           @db.VarChar(255)
  job_title            String?           @db.VarChar(100)
  last_name            String?           @db.VarChar(50)
  middle_name          String?           @db.VarChar(50)
  other1               String?           @db.VarChar(255)
  other2               String?           @db.VarChar(255)
  other3               String?           @db.VarChar(255)
  pin_code             String?           @db.VarChar(20)
  recruiter_comments   String?           @db.VarChar(255)
  skills               String?           @db.VarChar(255)
  state                String?           @db.VarChar(100)
  status               String?           @db.VarChar(100)
  title                String?           @db.VarChar(50)
  work_experience      String?           @db.VarChar(50)
  qualifications       qualifications[]  @relation("CandidateQualifications")
  workExperiences      work_experience[] @relation("CandidateWorkExperience")
  created_by           String?           @db.VarChar(255)

  candidate_applied_jobs candidate_applied_jobs[]
}

model work_experience {
  exp_id            Int            @id @default(autoincrement())
  candidate_id      Int
  organisation_name String         @db.VarChar(255)
  total_tenure      String?        @db.VarChar(50)
  last_designation  String?        @db.VarChar(100)
  last_drawn_salary String?        @db.VarChar(50)
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  candidate         candidate_list @relation("CandidateWorkExperience", fields: [candidate_id], references: [candidate_id])
}

model qualifications {
  qualifications_id  Int            @id @default(autoincrement())
  candidate_id       Int
  course             String         @db.VarChar(100)
  college_university String         @db.VarChar(255)
  year_of_passing    String         @db.VarChar(100)
  percentage_cgpa    String?        @db.VarChar(20)
  created_at         DateTime       @default(now())
  updated_at         DateTime?
  candidate          candidate_list @relation("CandidateQualifications", fields: [candidate_id], references: [candidate_id])
}

model candidate_applied_jobs {
  id           Int            @id @default(autoincrement())
  candidate_id Int
  job_id       Int
  candidate    candidate_list @relation(fields: [candidate_id], references: [candidate_id])
  job          job_post       @relation(fields: [job_id], references: [id])
}
